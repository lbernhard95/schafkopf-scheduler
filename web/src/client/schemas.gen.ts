// This file is auto-generated by @hey-api/openapi-ts

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $PollResponse = {
    properties: {
        bitpoll_link: {
            type: 'string',
            title: 'Bitpoll Link'
        },
        start_next_poll_date: {
            type: 'string',
            format: 'date-time',
            title: 'Start Next Poll Date'
        },
        next_schafkopf_event: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Schafkopf Event'
        },
        current_poll_started: {
            type: 'string',
            format: 'date-time',
            title: 'Current Poll Started'
        }
    },
    type: 'object',
    required: ['bitpoll_link', 'start_next_poll_date', 'current_poll_started'],
    title: 'PollResponse'
} as const;

export const $SubscribeCountResponse = {
    properties: {
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['count'],
    title: 'SubscribeCountResponse'
} as const;

export const $SubscribeRequest = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'SubscribeRequest'
} as const;

export const $SubscribeResponse = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'SubscribeResponse'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;
